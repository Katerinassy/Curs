import { useEffect, useState } from "react";
import "../style/cart.css";

function Cart() {
  const [cart, setCart] = useState([]);
  const [fullName, setFullName] = useState("");
  const [address, setAddress] = useState("");
  const [phone, setPhone] = useState("");

  useEffect(() => {
    const isLoggedIn = localStorage.getItem("isLoggedIn");
    if (!isLoggedIn) {
      window.location.href = "/login";
    }

    const savedCart = JSON.parse(localStorage.getItem("cart")) || [];
    setCart(savedCart);
  }, []);

  const total = cart.reduce((sum, item) => sum + item.price * (item.quantity || 1), 0);

  const handleCheckout = async (e) => {
    e.preventDefault();

    if (!fullName || !address || !phone) {
      alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!");
      return;
    }

    const currentUser = localStorage.getItem("currentUser");
    if (!currentUser) {
      alert("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }

    const newOrder = {
      date: new Date().toLocaleString(),
      fullName,
      address,
      phone,
      total,
      items: cart.map(item => ({
        name: item.name,
        price: item.price,
        img: item.img,
        quantity: item.quantity || 1,
      })),
    };

    try {
      const response = await fetch("/checkout", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${localStorage.getItem("token")}`,
        },
        body: JSON.stringify(newOrder),
      });

      if (response.ok) {
        const data = await response.json();
        setCart([]);
        localStorage.removeItem("cart");
        alert("–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é.");
        window.location.href = "/profile";
      } else {
        const errorData = await response.json();
        alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: ${errorData.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    } catch (err) {
      alert("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: " + err.message);
    }
  };

  if (cart.length === 0) {
    return <p className="empty-cart">–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>;
  }

  return (
    <div className="cart-container">
      <h1 className="cart-title">üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</h1>

      <div className="cart-items">
        {cart.map((item, index) => (
          <div key={index} className="cart-item">
            <img src={item.img} alt={item.name} />
            <div className="cart-item-info">
              <p className="cart-item-name">{item.name}</p>
              <p className="cart-item-price">${item.price} x {item.quantity || 1}</p>
            </div>
          </div>
        ))}
      </div>

      <h2 className="cart-total">–ò—Ç–æ–≥–æ: ${total}</h2>

      <form onSubmit={handleCheckout} className="checkout-form">
        <input
          type="text"
          placeholder="–§–ò–û"
          value={fullName}
          onChange={(e) => setFullName(e.target.value)}
          required
        />
        <input
          type="text"
          placeholder="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"
          value={address}
          onChange={(e) => setAddress(e.target.value)}
          required
        />
        <input
          type="tel"
          placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
          value={phone}
          onChange={(e) => setPhone(e.target.value)}
          required
        />
        <button type="submit" className="checkout-btn">–û–ø–ª–∞—Ç–∏—Ç—å</button>
      </form>

      <p className="delivery-info">üöö –ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 1‚Äì2 –¥–Ω–µ–π</p>
    </div>
  );
}

export default Cart;