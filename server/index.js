import express from 'express';
import mongoose from 'mongoose';
import dotenv from 'dotenv';
import cors from 'cors';
import bcrypt from 'bcryptjs';
import { Product } from './models/Product.js';
import { User } from './models/User.js';
import { Order } from './models/Order.js';
import authRoutes from './routes/auth.js';
import orderRoutes from './routes/orderRoutes.js';

dotenv.config();
const app = express();

app.use(cors());
app.use(express.json());

mongoose
  .connect(process.env.MONGO_URI)
  .then(() =>
    console.log(
      `‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –≤ ${new Date().toLocaleString("ru-RU", {
        timeZone: "Europe/Moscow",
      })}`
    )
  )
  .catch((err) => console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MongoDB:`, err.message));

const defaultProducts = [
  { id: 1, name: '–ö–æ–ª—å—Ü–æ –°–µ—Ä–¥—Ü–µ', price: 120, image: '/images/love.jpg', description: '–ö–æ–ª—å—Ü–æ –≤ —Ñ–æ—Ä–º–µ —Å–µ—Ä–¥—Ü–∞', category: '–ö–æ–ª—å—Ü–∞' },
  { id: 2, name: '–ö–æ–ª—å—Ü–æ –ö–ª–∞—Å—Å–∏–∫–∞', price: 150, image: '/images/classika.jpg', description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ –∫–æ–ª—å—Ü–æ', category: '–ö–æ–ª—å—Ü–∞' },
  { id: 3, name: '–ö–æ–ª—å—Ü–æ –í–µ—á–Ω–æ—Å—Ç—å', price: 200, image: '/images/vechnost.jpg', description: '–°–∏–º–≤–æ–ª –≤–µ—á–Ω–æ–π –ª—é–±–≤–∏', category: '–ö–æ–ª—å—Ü–∞' },
  { id: 4, name: '–ö–æ–ª—å—Ü–æ –ó–≤–µ–∑–¥–∞', price: 200, image: '/images/star.jpg', description: '–°–∏—è–Ω–∏–µ –∑–≤–µ–∑–¥—ã', category: '–ö–æ–ª—å—Ü–∞' },
  { id: 5, name: '–ö–æ–ª—å—Ü–æ –õ—É–Ω–∞', price: 170, image: '/images/loon.jpg', description: '–ö–æ–ª—å—Ü–æ —Å –ª—É–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º', category: '–ö–æ–ª—å—Ü–∞' },
  { id: 6, name: '–ö–æ–ª—å—Ü–æ –°–æ–ª–Ω—Ü–µ', price: 190, image: '/images/sun.jpg', description: '–Ø—Ä–∫–æ–µ —Å–æ–ª–Ω–µ—á–Ω–æ–µ –∫–æ–ª—å—Ü–æ', category: '–ö–æ–ª—å—Ü–∞' },
  { id: 7, name: '–ö–æ–ª—å—Ü–æ –¶–≤–µ—Ç–æ–∫', price: 160, image: '/images/flover.jpg', description: '–ö–æ–ª—å—Ü–æ —Å —Ü–≤–µ—Ç–æ—á–Ω—ã–º —É–∑–æ—Ä–æ–º', category: '–ö–æ–ª—å—Ü–∞' },
  { id: 8, name: '–ö–æ–ª—å—Ü–æ –≠–ª–µ–≥–∞–Ω—Ç', price: 220, image: '/images/elegant.jpg', description: '–≠–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ –∫–æ–ª—å—Ü–æ', category: '–ö–æ–ª—å—Ü–∞' },
  { id: 9, name: '–ö–æ–ª—å—Ü–æ –õ–µ–±–µ–¥—å', price: 210, image: '/images/lebed.jpg', description: '–ö–æ–ª—å—Ü–æ —Å –ª–µ–±–µ–¥–∏–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º', category: '–ö–æ–ª—å—Ü–∞' },
  { id: 10, name: '–ö–æ–ª—å—Ü–æ –ö–∞–ø–ª—è', price: 140, image: '/images/cap.jpg', description: '–ö–æ–ª—å—Ü–æ –≤ —Ñ–æ—Ä–º–µ –∫–∞–ø–ª–∏', category: '–ö–æ–ª—å—Ü–∞' },
  { id: 11, name: '–°–µ—Ä—å–≥–∞ –ó–≤–µ–∑–¥–∞', price: 90, image: '/images/s1.jpg', description: '–°–µ—Ä—å–≥–∞ –≤ —Ñ–æ—Ä–º–µ –∑–≤–µ–∑–¥—ã', category: '–°–µ—Ä—ë–∂–∫–∏' },
  { id: 12, name: '–°–µ—Ä—å–≥–∞ –õ—É–Ω–∞', price: 95, image: '/images/s5.jpg', description: '–°–µ—Ä—å–≥–∞ —Å –ª—É–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º', category: '–°–µ—Ä—ë–∂–∫–∏' },
  { id: 13, name: '–°–µ—Ä—å–≥–∞ –°–æ–ª–Ω—Ü–µ', price: 100, image: '/images/s8.jpg', description: '–Ø—Ä–∫–∞—è —Å–æ–ª–Ω–µ—á–Ω–∞—è —Å–µ—Ä—å–≥–∞', category: '–°–µ—Ä—ë–∂–∫–∏' },
  { id: 14, name: '–°–µ—Ä—å–≥–∞ –¶–≤–µ—Ç–æ–∫', price: 110, image: '/images/s6.jpg', description: '–°–µ—Ä—å–≥–∞ —Å —Ü–≤–µ—Ç–æ—á–Ω—ã–º —É–∑–æ—Ä–æ–º', category: '–°–µ—Ä—ë–∂–∫–∏' },
  { id: 15, name: '–°–µ—Ä—å–≥–∞ –°–µ—Ä–¥—Ü–µ', price: 120, image: '/images/s2.jpg', description: '–°–µ—Ä—å–≥–∞ –≤ —Ñ–æ—Ä–º–µ —Å–µ—Ä–¥—Ü–∞', category: '–°–µ—Ä—ë–∂–∫–∏' },
  { id: 16, name: '–°–µ—Ä—å–≥–∞ –õ–µ–±–µ–¥—å', price: 130, image: '/images/s4.jpg', description: '–°–µ—Ä—å–≥–∞ —Å –ª–µ–±–µ–¥–∏–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º', category: '–°–µ—Ä—ë–∂–∫–∏' },
  { id: 17, name: '–°–µ—Ä—å–≥–∞ –ö–∞–ø–ª—è', price: 140, image: '/images/s10.jpg', description: '–°–µ—Ä—å–≥–∞ –≤ —Ñ–æ—Ä–º–µ –∫–∞–ø–ª–∏', category: '–°–µ—Ä—ë–∂–∫–∏' },
  { id: 18, name: '–°–µ—Ä—å–≥–∞ –≠–ª–µ–≥–∞–Ω—Ç', price: 150, image: '/images/s9.jpg', description: '–≠–ª–µ–≥–∞–Ω—Ç–Ω–∞—è —Å–µ—Ä—å–≥–∞', category: '–°–µ—Ä—ë–∂–∫–∏' },
  { id: 19, name: '–°–µ—Ä—å–≥–∞ –í–µ—á–Ω–æ—Å—Ç—å', price: 160, image: '/images/s3.jpg', description: '–°–µ—Ä—å–≥–∞ —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É—é—â–∞—è –≤–µ—á–Ω–æ—Å—Ç—å', category: '–°–µ—Ä—ë–∂–∫–∏' },
  { id: 20, name: '–°–µ—Ä—å–≥–∞ –ö–ª–∞—Å—Å–∏–∫–∞', price: 170, image: '/images/s1.jpg', description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å–µ—Ä—å–≥–∞', category: '–°–µ—Ä—ë–∂–∫–∏' },
  { id: 21, name: '–ë—Ä–∞—Å–ª–µ—Ç –ó–≤–µ–∑–¥–∞', price: 200, image: '/images/starbraslet.jpg', description: '–ë—Ä–∞—Å–ª–µ—Ç —Å –∑–≤–µ–∑–¥–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º', category: '–ë—Ä–∞—Å–ª–µ—Ç—ã' },
  { id: 22, name: '–ë—Ä–∞—Å–ª–µ—Ç –õ—É–Ω–∞', price: 210, image: '/images/loonbraslet.jpg', description: '–ë—Ä–∞—Å–ª–µ—Ç —Å –ª—É–Ω–Ω—ã–º —É–∑–æ—Ä–æ–º', category: '–ë—Ä–∞—Å–ª–µ—Ç—ã' },
  { id: 23, name: '–ë—Ä–∞—Å–ª–µ—Ç –°–æ–ª–Ω—Ü–µ', price: 220, image: '/images/sunbraslet.jpg', description: '–Ø—Ä–∫–∏–π —Å–æ–ª–Ω–µ—á–Ω—ã–π –±—Ä–∞—Å–ª–µ—Ç', category: '–ë—Ä–∞—Å–ª–µ—Ç—ã' },
  { id: 24, name: '–ë—Ä–∞—Å–ª–µ—Ç –¶–≤–µ—Ç–æ–∫', price: 230, image: '/images/floverbraslet.jpg', description: '–ë—Ä–∞—Å–ª–µ—Ç —Å —Ü–≤–µ—Ç–æ—á–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º', category: '–ë—Ä–∞—Å–ª–µ—Ç—ã' },
  { id: 25, name: '–ë—Ä–∞—Å–ª–µ—Ç –°–µ—Ä–¥—Ü–µ', price: 240, image: '/images/lovebraslet.jpg', description: '–ë—Ä–∞—Å–ª–µ—Ç –≤ —Ñ–æ—Ä–º–µ —Å–µ—Ä–¥—Ü–∞', category: '–ë—Ä–∞—Å–ª–µ—Ç—ã' },
  { id: 26, name: '–ë—Ä–∞—Å–ª–µ—Ç –õ–µ–±–µ–¥—å', price: 250, image: '/images/lebedbraslet.jpg', description: '–ë—Ä–∞—Å–ª–µ—Ç —Å –ª–µ–±–µ–¥–∏–Ω—ã–º —É–∑–æ—Ä–æ–º', category: '–ë—Ä–∞—Å–ª–µ—Ç—ã' },
  { id: 27, name: '–ë—Ä–∞—Å–ª–µ—Ç –ö–∞–ø–ª—è', price: 260, image: '/images/brasletkapla.jpg', description: '–ë—Ä–∞—Å–ª–µ—Ç –≤ —Ñ–æ—Ä–º–µ –∫–∞–ø–ª–∏', category: '–ë—Ä–∞—Å–ª–µ—Ç—ã' },
  { id: 28, name: '–ë—Ä–∞—Å–ª–µ—Ç –≠–ª–µ–≥–∞–Ω—Ç', price: 270, image: '/images/brasletelegat.jpg', description: '–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –±—Ä–∞—Å–ª–µ—Ç', category: '–ë—Ä–∞—Å–ª–µ—Ç—ã' },
  { id: 29, name: '–ë—Ä–∞—Å–ª–µ—Ç –í–µ—á–Ω–æ—Å—Ç—å', price: 280, image: '/images/brasletvechnost.jpg', description: '–ë—Ä–∞—Å–ª–µ—Ç —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É—é—â–∏–π –≤–µ—á–Ω–æ—Å—Ç—å', category: '–ë—Ä–∞—Å–ª–µ—Ç—ã' },
  { id: 30, name: '–ë—Ä–∞—Å–ª–µ—Ç –ö–ª–∞—Å—Å–∏–∫–∞', price: 290, image: '/images/brasletclassika.jpg', description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –±—Ä–∞—Å–ª–µ—Ç', category: '–ë—Ä–∞—Å–ª–µ—Ç—ã' },
  { id: 31, name: '–û–∂–µ—Ä–µ–ª—å–µ –ó–≤–µ–∑–¥–∞', price: 300, image: '/images/ostar.jpg', description: '–û–∂–µ—Ä–µ–ª—å–µ —Å –∑–≤–µ–∑–¥–æ–π', category: '–û–∂–µ—Ä–µ–ª—å—è' },
  { id: 32, name: '–û–∂–µ—Ä–µ–ª—å–µ –õ—É–Ω–∞', price: 310, image: '/images/oloon.jpg', description: '–û–∂–µ—Ä–µ–ª—å–µ —Å –ª—É–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º', category: '–û–∂–µ—Ä–µ–ª—å—è' },
  { id: 33, name: '–û–∂–µ—Ä–µ–ª—å–µ –°–æ–ª–Ω—Ü–µ', price: 320, image: '/images/osun.jpg', description: '–Ø—Ä–∫–æ–µ —Å–æ–ª–Ω–µ—á–Ω–æ–µ –æ–∂–µ—Ä–µ–ª—å–µ', category: '–û–∂–µ—Ä–µ–ª—å—è' },
  { id: 34, name: '–û–∂–µ—Ä–µ–ª—å–µ –¶–≤–µ—Ç–æ–∫', price: 330, image: '/images/oflover.jpg', description: '–û–∂–µ—Ä–µ–ª—å–µ —Å —Ü–≤–µ—Ç–æ—á–Ω—ã–º —É–∑–æ—Ä–æ–º', category: '–û–∂–µ—Ä–µ–ª—å—è' },
  { id: 35, name: '–û–∂–µ—Ä–µ–ª—å–µ –°–µ—Ä–¥—Ü–µ', price: 340, image: '/images/olove.jpg', description: '–û–∂–µ—Ä–µ–ª—å–µ –≤ —Ñ–æ—Ä–º–µ —Å–µ—Ä–¥—Ü–∞', category: '–û–∂–µ—Ä–µ–ª—å—è' },
  { id: 36, name: '–û–∂–µ—Ä–µ–ª—å–µ –õ–µ–±–µ–¥—å', price: 350, image: '/images/olebed.jpg', description: '–û–∂–µ—Ä–µ–ª—å–µ —Å –ª–µ–±–µ–¥–∏–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º', category: '–û–∂–µ—Ä–µ–ª—å—è' },
  { id: 37, name: '–û–∂–µ—Ä–µ–ª—å–µ –ö–∞–ø–ª—è', price: 360, image: '/images/ocapl.jpg', description: '–û–∂–µ—Ä–µ–ª—å–µ –≤ —Ñ–æ—Ä–º–µ –∫–∞–ø–ª–∏', category: '–û–∂–µ—Ä–µ–ª—å—è' },
  { id: 38, name: '–û–∂–µ—Ä–µ–ª—å–µ –≠–ª–µ–≥–∞–Ω—Ç', price: 370, image: '/images/oeleg.jpg', description: '–≠–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ –æ–∂–µ—Ä–µ–ª—å–µ', category: '–û–∂–µ—Ä–µ–ª—å—è' },
  { id: 39, name: '–û–∂–µ—Ä–µ–ª—å–µ –í–µ—á–Ω–æ—Å—Ç—å', price: 380, image: '/images/ovech.jpg', description: '–û–∂–µ—Ä–µ–ª—å–µ —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É—é—â–µ–µ –≤–µ—á–Ω–æ—Å—Ç—å', category: '–û–∂–µ—Ä–µ–ª—å—è' },
  { id: 40, name: '–û–∂–µ—Ä–µ–ª—å–µ –ö–ª–∞—Å—Å–∏–∫–∞', price: 390, image: '/images/oclass.jpg', description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ –æ–∂–µ—Ä–µ–ª—å–µ', category: '–û–∂–µ—Ä–µ–ª—å—è' },
];

const createDefaultUsers = async () => [
  { name: "–ê–ª–µ–∫—Å–µ–π –ò–≤–∞–Ω–æ–≤", email: "alex@example.com", password: await bcrypt.hash("password123", 10) },
  { name: "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞", email: "maria@example.com", password: await bcrypt.hash("password123", 10) },
];

const seedDatabase = async () => {
  try {
    const productCount = await Product.countDocuments();
    const userCount = await User.countDocuments();

    if (productCount === 0 || userCount === 0) {
      console.log(`üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ...`);
      await Product.deleteMany({});
      await User.deleteMany({});
      await Order.deleteMany({});

      console.log(`üì¶ –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã...`);
      const products = await Product.insertMany(defaultProducts);

      console.log(`üë§ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
      const defaultUsers = await createDefaultUsers();
      const users = await User.insertMany(defaultUsers);

      console.log(`üßæ –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑...`);
      await Order.create({
        user: users[0]._id,
        items: [{ 
          product: products.find(p => p.id === 1)._id, 
          quantity: 1, 
          price: products.find(p => p.id === 1).price,
          productName: products.find(p => p.id === 1).name
        }],
        totalAmount: products.find(p => p.id === 1).price,
        status: "pending",
        paymentStatus: "paid",
        shippingAddress: {
          firstName: "–ê–ª–µ–∫—Å–µ–π",
          lastName: "–ò–≤–∞–Ω–æ–≤",
          address: "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 10",
          city: "–ú–æ—Å–∫–≤–∞",
          postalCode: "123456",
          country: "–†–æ—Å—Å–∏—è",
          phone: "+79991234567"
        }
      });

      console.log(`‚úÖ –ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!`);
      console.log(`üë§ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:`);
      console.log(`   Email: alex@example.com, Password: password123`);
      console.log(`   Email: maria@example.com, Password: password123`);
    } else {
      console.log(`‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å, seed –ø—Ä–æ–ø—É—â–µ–Ω`);
    }
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã:`, err.message);
  }
};

mongoose.connection.once("open", seedDatabase);

// –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
app.get("/", (req, res) => res.send("üöÄ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!"));
app.get("/products", async (req, res) => {
  try {
    const products = await Product.find();
    res.json(products);
  } catch (err) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤" });
  }
});
app.get("/users", async (req, res) => {
  try {
    const users = await User.find().select('-password');
    res.json(users);
  } catch (err) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" });
  }
});
app.get("/orders", async (req, res) => {
  try {
    const orders = await Order.find().populate("user").populate("items.product");
    res.json(orders);
  } catch (err) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤" });
  }
});

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.use("/api/auth", authRoutes);
app.use("/api/orders", orderRoutes);

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));